!include <font-awesome/common>
@startuml Rhodey Class Diagram
skinparam classAttributeIconSize 0
title Rhodey War Simulator
hide circle
skinparam linetype ortho

' ===== CLASSES =====

rectangle "AllianceGroups" {

class Alliance {
    - members: vector<Conglomerate*>
}

class AllianceMember {
    name: string
}

class Conglomerate{
    - name: string
    + add(Conglomerate)*: void
    + print(): void
    + ~Conglomerate()
}
note left : Send my regards to\nPipi Longstocking

class Country {
    - sizeOfArmy: int
    - population: int
    - economy: double
    - morale: double
    - resolve: double
    - supplies: double
    - attrition: double
    - forces: Military
    - locations: Location**
    - Allies: Countries**
    - trainingFacilitys : TroopFactory **
    - vehicleFactories : VehicleFactory **
}

class Faction {
    - sizeOfArmy: int
    - population: int
    - economy: int
    - morale: int
    - forces: Military
}

class Location {
    - name: string
    - description: string
    - terrain: string
    - population: int

}

}

class Simulation {
    + Simulation()
    - war: War*
    - playerName: string
    ~Simulation()
    
}

rectangle "War"{
class War{
    - participants: vector<Conglomerate*>
    - reasonForWar: string
    - reasonEndWar: string
    - battles: vector<Battle*>
    - state: WarPhases
    + request(): void
    + setState(phase: WarPhases): void
}



class WarPhases {
    #war: War*
    {abstract} + handle(): void
    {abstract} + changeState(): void
}

class Dispute {
    + handle(): void
    + changeState(): void
}

class Conflict {
    + handle(): void
    + changeState(): void
}

class Hostilities {
    + handle(): void
    + changeState(): void
}

class PostHostilitiesConflict {
    + handle(): void
    + changeState(): void
}

class PostHostilitiesDispute {
    + handle(): void
    + changeState(): void
}

class DisputeSettled {
    + handle(): void
    + changeState(): void
}

}




rectangle Military {
    class Military {
        - BattleGroups: Forces**
        - Spies: SpyAgency**
        {abstract} + move(): void
        ~Military()
    }

    class Forces {
        - name: string
        - army: Army
        - navy: Navy
        - airforce: Airforce
        {abstract} + move(): void
        ~Military()
    }

    class Army {
        - name: string
        - numSoldiers: int
        - numCommanders: int
        - numTanks: int
        - numTrucks: int
        - units: Entity**
        + move(): void
        ~Army()
    }

    class Navy {
        - name: string
        - numCargoShips: int
        - numWarShips: int
        - numCarriers: int
        - numSubmarines: int
        - numFighters: int
        - units: Entity**
        + move(): void
        ~Navy()
    }

    class AirForce {
        - name: string
        - numFighters: int
        - numBombers: int
        - units: Entity**
        + move(): void
        ~AirForce()
    }

    class SpyAgency {
        # workFor: Country*
        # spyingOn: Country*d
        # status: string
        + SpyAgency(spyingFor Country*, spyingOn Country*)
        + update(): void
        ~SpyAgency()
}

    class Spy {
        {abstract} + update(): void
    }
}





'==== Factory method ===='
rectangle "Factories" {
class UnitFactory{
    # name: string
    # hp: int
    # dmg: int
    + unitFactory()
    ~ unitFactory()
    + {abstract} makeUnit(): Entity*
    
}

class VehicleFactory {
    + VehicleFactory()
    ~ VehicleFactory()
    + makeUnit(): Entity*
}

class TroopFactory {
    + TroopFactory()
    ~ TruckFactory()
    + makeUnit(): Entity*
}

class AirVehicleFactory {

}

class WaterVehicleFactory {

}
' dankie <3<3<3<3<3<3

class LandVehicleFactory {

} 



class MilitaryFactory {
    + MilitaryFactory()
    ~ MilitaryFactory()
    + makeMilitary() : Military*
}

enum VehicleType {
    <<enumeration>>
    Truck
    Tank
    Carrier
    CargoShip
    Warship
    Submarine
    FighterJet
    Bomber
    CargoPlane
}

enum TroopType {
    <<enumeration>>
    Soldier
    Commander
    Spy
}

enum MilitaryType {
    <<enumeration>>
    Navy
    Army
    AirForce
    SpyAgency
}

}

class Battle {
    - country: Country*
    - location: Location*
    - attackingForces: Forces**
    - defendingForces: Forces**
    + Battle(Forces~**, Forces~**, Location*, Country*)
    + start(): void
    + end(): void
    ~Battle()
}










'==== Entities ===='
rectangle "Entities" {
    
    class Entity {
        - name: string
        - hp: int
        - dmg: int
        - weapons: Weapon**
        + Entity()
        {abstract} + attack(): void
        {abstract} + defend(): void
        {abstract} + clone(): Entity
    }

    class Vehicle {
        - capacity: int
        + Vehicle()
        {abstract} + attack(): void
        {abstract} + defend(): void
        {abstract} + clone(): Vehicle
    }

    class GroundVehicle {
        + GroundVehicle()
        {abstract} + attack(): void
        {abstract} + defend(): void
        {abstract} + clone(): GroundVehicle
    }

    class Truck {
        + Truck()
        + attack(): void
        + defend(): void
        + clone(): GroundVehicle
    }

    class Tank {
        + Tank()
        + attack(): void
        + defend(): void
        + clone(): GroundVehicle
    }

    class AirVehicle {
        + AirVehicle()
        {abstract} + attack(): void
        {abstract} + defend(): void
        {abstract} + clone(): AirVehicle
    }

    class FighterJet {
        + FighterJet()
        + attack(): void
        + defend(): void
        + clone(): AirVehicle
    }

    class Bomber {
        + Bomber()
        + attack(): void
        + defend(): void
        + clone(): AirVehicle
    }

    class CargoPlane {
        + CargoPlane()
        + attack(): void
        + defend(): void
        + clone(): AirVehicle
    }

    class WaterVehicle {
        + WaterVehicle()
        {abstract} + attack(): void
        {abstract} + defend(): void
        {abstract} + clone(): WaterVehicle
    }

    class CargoShip {
        + CargoShip()
        + attack(): void
        + defend(): void
        + clone(): WaterVehicle
    }

    class Warship {
        + Warship()
        + attack(): void
        + defend(): void
        + clone(): WaterVehicle
    }

    class Submarine {
        + Submarine()
        + attack(): void
        + defend(): void
        + clone(): WaterVehicle
    }

    class Carrier {
        + Carrier()
        + attack(): void
        + defend(): void
        + clone(): WaterVehicle
    }

    class Troop {
        + Troop()
        {abstract} + attack(): void
        {abstract} + defend(): void
        {abstract} + clone(): Troop
    }

    class Soldier {
        + Soldier()
        + attack(): void
        + defend(): void
        + clone(): Troop
    }

    class Commander {
        + Commander()
        + attack(): void
        + defend(): void
        + command(): void
        + clone(): Troop
    }

    class Weapon {
    - weaponName: string
    - dmg: int
    }
}


'==== Different strategy states ===='
rectangle "Strategy States" {
    class BattleStrategy {
        + battleAlgorithm()
        {abstract} + redistributeTroops(): void
        {abstract} + recruitTroops(): void
        {abstract} + attack(): void
        {abstract} + defend(): void
        {abstract} + ReasearchAndDevelop(): void
        {abstract} + buildVehicles(): void
        {abstract} + buildWeapons(): void
        {abstract} + makeAlliance(): void
        {abstract} + endAlliance(): void
        {abstract} + surrender(): void
        {abstract} + proposeTreaty(): void
        {abstract} + spy(): void
  
    }
    class DefensiveStrategy {
        + defensiveAlgorithm()
        + redistributeTroops(): void
        + recruitTroops(): void
        + defend(): void
        + ReasearchAndDevelop(): void
        + buildVehicles(): void
        + buildWeapons(): void
        + makeAlliance(): void
        + endAlliance(): void
        + surrender(): void
        + proposeTreaty(): void
        + spy(): void
    }
    class OffensiveStrategy {
        +offensiveAlgorithm()
        + defensiveAlgorithm()
        + redistributeTroops(): void
        + recruitTroops(): void
        + attack(): void
        + defend(): void
        + ReasearchAndDevelop(): void
        + buildVehicles(): void
        + buildWeapons(): void
        + makeAlliance(): void
        + endAlliance(): void
        + surrender(): void
        + proposeTreaty(): void
        + spy(): void
    }
    
    class ResearchiveStrategy {
        +researchAlgorithm()
        + defensiveAlgorithm()
        + redistributeTroops(): void
        + recruitTroops(): void
        + attack(): void
        + defend(): void
        + ReasearchAndDevelop(): void
        + buildVehicles(): void
        + buildWeapons(): void
        + makeAlliance(): void
        + endAlliance(): void
        + surrender(): void
        + proposeTreaty(): void
        + spy(): void
    }

    class PrepareStrategy {
        +researchAlgorithm()
        + defensiveAlgorithm()
        + redistributeTroops(): void
        + recruitTroops(): void
        + attack(): void
        + defend(): void
        + ReasearchAndDevelop(): void
        + buildVehicles(): void
        + buildWeapons(): void
        + makeAlliance(): void
        + endAlliance(): void
        + surrender(): void
        + proposeTreaty(): void
        + spy(): void
    }
}




'==== Iterators ===='
rectangle "Iterators" {
    class normalIterator {
        +first()
        +next()
        +isDone()
        +currentItem()
    }
'==== Aliance Groups Iterators ===='
    class allianceIterators {}
    class conglomerateIterator {}
    class countryIterator {}
    class factionIterator {}
}

rectangle "Memento" {
    class Memento{
        +getState()
        -state : String
        ~Memento():virtual
    }
    class caretaker {
        - MementoList<Memento>:List
        + add(Memento state):void

    }
    class Originator {
        +setState(String state):void
        +restoreBeforeState(Memento):String
    }

    class warMomento { 
    'Im thinking this makes a deep copy of a war
    ' which is gonna be fucking hard i think so pls come up with a better way lmao

    }
}

' ===== RELATIONSHIPS =====
Simulation o- War

Entity o- Weapon
Entity <|-- Troop
Entity <|-- Vehicle
Troop <|-- Soldier
Troop <|-- Commander
Vehicle <|-- GroundVehicle
Vehicle <|-- AirVehicle
Vehicle <|-- WaterVehicle
GroundVehicle <|-- Truck
GroundVehicle <|-- Tank
AirVehicle <|-- FighterJet
AirVehicle <|-- Bomber
AirVehicle <|-- CargoPlane
WaterVehicle <|-- CargoShip
WaterVehicle <|-- 

    

VehicleFactory ..> Truck : <<instantiates>>
VehicleFactory ..> Tank : <<instantiates>>
VehicleFactory ..> Warship : <<instantiates>>
VehicleFactory ..> Submarine : <<instantiates>>
VehicleFactory ..> Carrier : <<instantiates>>
VehicleFactory ..> CargoShip : <<instantiates>>
VehicleFactory ..> Bomber : <<instantiates>>
VehicleFactory ..> CargoPlane : <<instantiates>>
TroopFactory   ..> Soldier : <<instantiates>>
TroopFactory   ..> Commander : <<instantiates>>

Originator ..> Memento
caretaker o-- Memento

Forces *-- Army
Forces *-- Navy
Forces *-- AirForce

Military o-- Forces

Army o-- Entity
Navy o-- Entity
AirForce o-- Entity

Country o- Location
Country *-- Military

Battle o-- Country
Battle o-- Forces

SpyAgency <|-- Spy
Military o-- SpyAgency

AllianceMember <|-- Country
AllianceMember <|-- Faction
Conglomerate <|-- Alliance
Conglomerate <|-- AllianceMember
Conglomerate o-- Alliance
BattleStrategy o-- Conglomerate
DefensiveStrategy <|-- BattleStrategy
OffensiveStrategy <|-- BattleStrategy
ResearchiveStrategy <|-- BattleStrategy
PrepareStrategy <|-- BattleStrategy

Dispute <|-- WarPhases
Conflict <|-- WarPhases
Hostilities <|-- WarPhases
PostHostilitiesConflict <|-- WarPhases
PostHostilitiesDispute <|-- WarPhases
DisputeSettled <|-- WarPhases

War o-l- WarPhases
War o-l- Conglomerate
WarPhases o- War
War o-- Battle

'Iterators'
normalIterator <|-- allianceIterators
allianceIterators <|-- countryIterator
allianceIterators <|-- factionIterator
allianceIterators <|-- conglomerateIterator
Country <--x countryIterator
Faction <--x factionIterator
Conglomerate <--x conglomerateIterator
allianceIterators <.. Alliance : <<instanciate>>

@enduml