!include <font-awesome/common>
@startuml Rhodey Class Diagram
skinparam classAttributeIconSize 0
title Rhodey War Simulator
hide circle
skinparam linetype ortho

' ===== CLASSES =====

rectangle UI as UI {
    class UIView {
        - controller: UIController*
    }
    class UIController {
        - view: UIView*
        - model: Simluation*
    }
}
note bottom of UI #lightblue : USER INTERFACE

rectangle "AllianceGroups" {
    class Alliance {
        - members: vector<Country*>
    }

    ' class Conglomerate{
        ' - name: string
        ' + add(Conglomerate)*: void
        ' + print(): void
        ' + ~Conglomerate()
    ' }

    class Country {
        - sizeOfArmy: int
        - population: int
        - economy: double
        - morale: double
        - resolve: double
        - supplies: double
        - attrition: double
        - forces: Military
        - alliances: Alliance *
        - Allies: vector<Countries*>
        - trainingFacilitys: vector<TroopFactory*>
        - vehicleFactories: vector<VehicleFactory*>
    }

    class Region {
        - name: string
        - description: string
        - terrain: string
        - population: int
    }

    class Map {
        - regions : std::map<regionUUID, Region*>
    }
}



rectangle "War " as War {

    class Simulation {
        + Simulation()
        {static} - uniqueInstance: Simulation*
        # Simulation()
        #~Simulation()
        #Simulation(Simulation &)
        #=(Simulation &) : Simulation &
        - view: UIView*
        - war: War*
        - playerName: string
        ~Simulation()

    }

    class War{
        - participants: vector<Alliances*>
        - reasonForWar: string
        - reasonEndWar: string
        - battles: vector<Battle*>
        - state: WarPhases
        + request(): void
        + setState(phase: WarPhases): void
        + makeMemento():WarMemento
        + restoreBeforeState(WarMemento memento): void
    }



    class WarPhases {
        #war: War*
        + handle(): void
        {abstract} + changeState(): void
    }

    class Dispute {
        + handle(): void
        + changeState(): void
    }

    class Conflict {
        + handle(): void
        + changeState(): void
    }

    class Hostilities {
        + handle(): void
        + changeState(): void
    }

    class PostWar {
        + handle(): void
        + changeState(): void
    }

    class DisputeSettled {
        + handle(): void
        + changeState(): void
    }
    note bottom #lightgreen : STATE
}
note top of War #lightgreen : SINGLETON


    class Forces {
        - name: string
        - army: Army*
        - navy: Navy*
        - airforce: Airforce*
        - Region: Region*
        {abstract} + move(): void
        ~Military()
    }


    rectangle Spies {

        class SpyAgency {
            # workFor: vector<Country*>
            # spyingOn: vector<Country*>
            # status: string
            + SpyAgency(spyingFor Country*, spyingOn Country*)
            + update(): void
            ~SpyAgency()
        }

        class Spy {
            {abstract} + update(): void
        }

    }
    note right #lightgreen : OBSERVER
}





'==== Factory method ===='
rectangle "Factories" {
    class UnitFactory{
        # name: string
        # num: int
        # _con : Country*
        # w1 : vector<Weapon*>*
        # w2 : vector<Weapon*>*
        # w3 : vector<Weapon*>*
        # w4 : vector<Weapon*>*
        # w5 : vector<Weapon*>*
        # w6 : vector<Weapon*>*
        # e : Entity*
        ~ unitFactory()
        + {abstract} makeUnit(name : string, int : num, weapons : vector<Weapon*>*): Entity*

    }

    class VehicleFactory {
        + VehicleFactory(name : string, int : num, vehicle : VehicleType, con : Country*)
        ~ VehicleFactory()
        + makeUnit(): Entity*
    }

    class TroopFactory {
        + TroopFactory(name : string, int : num, con : Country*)
        ~ TruckFactory()
        + makeUnit(): Entity*
    }

    enum VehicleType {
        <<enumeration>>
        Truck
        Tank
        Carrier
        CargoShip
        Warship
        Submarine
        FighterJet
        Bomber
        CargoPlane
    }

    enum WeaponType {
        <<enumeration>>
        Bazooka
        Sniper
        Sniper50
        Pistol
        AR
        SMG
        DualBuretter
        Ak47 
        Bomb
        Cannon 
        Torpedo
        Missile
        MG160
    }
}
note bottom #lightgreen : ABSTRACT FACTORY

class Battle {
    - country: Country*
    - Region: Region*
    - attackingForces: Forces**
    - defendingForces: Forces**
    + Battle(Forces~**, Forces~**, Region*, Country*)
    + start(): void
    + end(): void
    ~Battle()
}


'==== Entities ===='
rectangle "Entities" {

    class Entity {
        - name: string
        - hp: int
        - dmg: int
        - weapons: Weapon**
        + Entity()
        {abstract} + attack(): void
        {abstract} + defend(): void
        {abstract} + clone(): Entity
    }
    note bottom #lightgreen : PROTOTYPE

    class Vehicle {
        - capacity: int
        + Vehicle()
        {abstract} + attack(): void
        {abstract} + defend(): void
        {abstract} + clone(): Vehicle
    }

    class GroundVehicle {
        + GroundVehicle()
        {abstract} + attack(): void
        {abstract} + defend(): void
        {abstract} + clone(): GroundVehicle
    }

    class Truck {
        + Truck()
        + attack(): void
        + defend(): void
        + clone(): GroundVehicle
    }

    class Tank {
        + Tank()
        + attack(): void
        + defend(): void
        + clone(): GroundVehicle
    }

    class AirVehicle {
        + AirVehicle()
        {abstract} + attack(): void
        {abstract} + defend(): void
        {abstract} + clone(): AirVehicle
    }

    class FighterJet {
        + FighterJet()
        + attack(): void
        + defend(): void
        + clone(): AirVehicle
    }

    class Bomber {
        + Bomber()
        + attack(): void
        + defend(): void
        + clone(): AirVehicle
    }

    class CargoPlane {
        + CargoPlane()
        + attack(): void
        + defend(): void
        + clone(): AirVehicle
    }

    class WaterVehicle {
        + WaterVehicle()
        {abstract} + attack(): void
        {abstract} + defend(): void
        {abstract} + clone(): WaterVehicle
    }

    class CargoShip {
        + CargoShip()
        + attack(): void
        + defend(): void
        + clone(): WaterVehicle
    }

    class Warship {
        + Warship()
        + attack(): void
        + defend(): void
        + clone(): WaterVehicle
    }

    class Submarine {
        + Submarine()
        + attack(): void
        + defend(): void
        + clone(): WaterVehicle
    }

    class Carrier {
        + Carrier()
        + attack(): void
        + defend(): void
        + clone(): WaterVehicle
    }

    class Troop {
        + Troop()
        {abstract} + attack(): void
        {abstract} + defend(): void
        {abstract} + clone(): Troop
    }

    class Weapon {
        - weaponName: string
        - dmg: int
    }
}
note bottom #lightgreen : TEMPLATE METHOD


'==== Different strategy states ===='
rectangle "Strategy States" as StratStates {
    class BattleStrategy {
        # uf : TroopFactory* 
        # vf : VehicelFactory* 
        # _con : Country* 
        {abstract} + warAlgorithm(enum : int) 
        {abstract} ~BatttleStrategy
    }

    class DefensiveStrategy {
        - def : enum 
        - friendlyRegion : Region* 
        - enemyRegion : Region* 
        - _name : string 
        - num : int 
        + DefensiveStrategy()
        ~ DefensiveStrategy()
        + warAlgorithm(def : int)
        + redistributeTroops(): void
        + recruitTroops(): void
        + setNameNumCont(name : string, num : int, con : Country *): void
        + setDef(def : enum) : void
        + setFriendlyRegion(friendlyRegion : Region*): void
        + setEnemyRegion(friendlyRegion : Region*): void
    }
    
    class OffensiveStrategy {
        - off : enum 
        - friendlyRegion : Region* 
        - enemyRegion : Region*
        + OffensiveStrategy() 
        ~ OffensiveStrategy()
        + warAlgorithm(def : int)
        + redistributeTroops(): void
        + attack(): void
        + setFriendlyRegion(friendlyRegion : Region*): void
        + setEnemyRegion(friendlyRegion : Region*): void
    }

    class ResearchStrategy {
        - rad : enum
        - country : Country*
        + ResearchStrategy()
        ~ ResearchStrategy()
        + warAlgorithm(rad : int)
        + developResources(): void
        + developEconomy(): void
        + research(): void
        + setCountry(country : Country*): void
    }

    class PrepareStrategy {
        - prep : enum 
        - friendlyRegion : Region* 
        - enemyRegion : Region*
        - _name : string 
        - _num : int 
        - _veh : enum
        + PrepareStrategy()
        ~ PrepareStrategy()
        + warAlgorithm(prep : int)
        + recruitTroops(): void
        + buildVehicles(): void
        + setFriendlyRegion(friendlyRegion : Region*): void
        + setEnemyRegion(friendlyRegion : Region*): void
        + setNameNumCont(name : string, num : int, con : Country *): void
        + setVehicle(name : string, num : int, con : Country *, con : enum): void
    }

    class DiplomacyStrategy{
        - dip : enum
        - myCountry : Country*
        - enemyCountry : COuntry*
        + DiplomacyStrategy()
        ~ DiplomacyStrategy
        + warAlgorithm(dip : int)
        + proposeTreaty(): void
        + surrender(): void
        + setMyCountry(myCountry : Country*) : void
        + setEnemyCoutnry(enemyCountry : Country*) : void
    }
}
note right of StratStates #lightgreen : STRATEGY




rectangle "Mementos" as Mementos {
    class WarMemento{
        +getState()
        -state: WarState*
        ~Memento():virtual
    }
    class caretaker {
        - warStates: vector<WarMemento>
        + add(memento WarMemento):void

    }

    class WarState {

        - Vector<String>
        - WarState(War* war)
    }
}
note top of Mementos #lightgreen : MEMENTO

' ===== RELATIONSHIPS =====
Simulation o- War
Simulation o- Simulation

Entity o- Weapon
Entity <|-- Troop
Entity <|-- Vehicle
Vehicle <|-- GroundVehicle
Vehicle <|-- AirVehicle
Vehicle <|-- WaterVehicle
GroundVehicle <|-- Truck
GroundVehicle <|-- Tank
AirVehicle <|-- FighterJet
AirVehicle <|-- Bomber
AirVehicle <|-- CargoPlane
WaterVehicle <|-- CargoShip
WaterVehicle <|-- Warship
WaterVehicle <|-- Submarine
WaterVehicle <|-- Carrier


UnitFactory <|-- VehicleFactory
UnitFactory <|-- TroopFactory
VehicleFactory ..> Truck : <<instantiates>>
VehicleFactory ..> Tank : <<instantiates>>
VehicleFactory ..> Warship : <<instantiates>>
VehicleFactory ..> Submarine : <<instantiates>>
VehicleFactory ..> Carrier : <<instantiates>>
VehicleFactory ..> CargoShip : <<instantiates>>
VehicleFactory ..> Bomber : <<instantiates>>
VehicleFactory ..> CargoPlane : <<instantiates>>
TroopFactory   ..> Troop : <<instantiates>>
DefensiveStrategy ..> TroopFactory : <<instantiates>>
PrepareStrategy ..> TroopFactory : <<instantiates>>
PrepareStrategy ..> VehicleFactory : <<instantiates>>

War ..> WarMemento
caretaker o-- WarMemento
WarMemento o-- WarState

Forces o-- Entity

Country o-- VehicleFactory
Country o-- TroopFactory

Battle o-- Country

SpyAgency <|-- Spy
Military o-- SpyAgency

Alliance <|-- Country
War o-- Alliance
BattleStrategy o-- Country
DefensiveStrategy <|-- BattleStrategy
OffensiveStrategy <|-- BattleStrategy
ResearchStrategy <|-- BattleStrategy
PrepareStrategy <|-- BattleStrategy
DiplomacyStrategy <|-- BattleStrategy

Dispute <|-- WarPhases
Conflict <|-- WarPhases
Hostilities <|-- WarPhases
PostWar <|-- WarPhases
DisputeSettled <|-- WarPhases

War o-l- WarPhases
WarPhases o- War
War o-- Battle

War o-- Map
Map o-- Region
Region o-- Country
Region o-- Forces
Battle o-- Region
' UI Model View Controller
UIView -u-o UIController
UIController -d-o UIView
UIController -r-o Simulation
Simulation -r-o UIView

@enduml